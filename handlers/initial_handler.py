from aiogram import types, Router, F
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.googleapi_utils import spreadsheet_id, service
from handlers.mainserv_handler import builder_commands_main_servicemen
from handlers.servicemen_handler import builder_commands_servicemen

router = Router()


class MainCallback(CallbackData, prefix='main'):
    foo: str
    bar: str


class CommandsCallback(CallbackData, prefix='commands'):
    foo: str


builder = InlineKeyboardBuilder()
builder.button(
    text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    callback_data=MainCallback(foo="demo", bar="smth")
)

builder_commands_arend = InlineKeyboardBuilder()
button1 = builder_commands_arend.button(
    text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
    callback_data=CommandsCallback(foo="/submit")
)
button2 = builder_commands_arend.button(
    text="–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏",
    callback_data=CommandsCallback(foo="/status")
)
button3 = builder_commands_arend.button(
    text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
    callback_data=CommandsCallback(foo="/contacts")
)
button4 = builder_commands_arend.button(
    text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
    callback_data=CommandsCallback(foo="/feedback")
)
builder_commands_arend.adjust(1)


@router.message(CommandStart())
async def cmd_start(msg: types.Message) -> None:
    text = "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–æ–∫ " \
           "–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∏—Ö —Ä–∞–±–æ—Ç.\n\n" \
           "–¢–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –≤ —Ç–≤–æ–µ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ –ø–µ—Ä–µ–≥–æ—Ä–∏—Ç" \
           " –ª–∞–º–ø–æ—á–∫–∞ –∏–ª–∏ –∑–∞—Å–∫—Ä–∏–ø–∏—Ç –¥–≤–µ—Ä—å, " \
           "—Å–º–µ–ª–æ –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ üöÄ.\n\n –Ø —Å–¥–µ–ª–∞—é —Ç–∞–∫, " \
           "—á—Ç–æ–±—ã —Ç–≤–æ—è –∑–∞—è–≤–∫–∞:\n" \
           "üîπ–°–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ\n" \
           "üîπ–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞—Å—å –∏ –Ω–∞–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n" \
           "üîπ–ò –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n" \
           "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëá"
    USER_ID = int(msg.from_user.id)
    await msg.answer(text=text, reply_markup=builder.as_markup())

    @router.callback_query(MainCallback.filter(F.foo == "demo"))
    async def my_callback_foo(query: CallbackQuery,
                              callback_data: MainCallback):
        arendators_values = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range='–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã!A:G',
            majorDimension='ROWS'
        ).execute()['values'][2:]
        contact = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range='–ö–æ–Ω—Ç–∞–∫—Ç—ã!A2:B2',
            majorDimension='ROWS'
        ).execute()['values']
        main_serviceman = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range='–ì–ª–∞–≤–Ω—ã–π_–°–µ—Ä–≤–∏—Å–º–µ–Ω!A:F',
            majorDimension='ROWS'
        ).execute()['values'][2:]
        servicemen = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range='–°–µ—Ä–≤–∏—Å–º–µ–Ω—ã!A:F',
            majorDimension='ROWS'
        ).execute()['values'][2:]
        admin_values = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!A:E',
            majorDimension='ROWS'
        ).execute()['values'][2:]
        print(main_serviceman, admin_values)
        list_of_arend_ids = list()
        list_of_servicemen_ids = list()
        text = "‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" \
               "–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –Ω—É–∂–Ω–∞. –ï—Å–ª–∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å " \
               "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start"
        admin_text = f"‚ú® {admin_values[0][2]} {admin_values[0][3]}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n" \
               "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getinfo, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ. "
        for i in range(len(arendators_values)):
            list_of_arend_ids.append(arendators_values[i][0])
        for i in range(len(servicemen)):
            list_of_servicemen_ids.append(servicemen[i][0])

        main_serviceman_id = main_serviceman[0][0]
        if USER_ID == int(main_serviceman_id):  # –∞–π–¥–∏ –≥–ª–∞–≤–Ω–æ–≥–æ
            await query.message.answer(text=text,
                                       reply_markup=builder_commands_main_servicemen.as_markup())
        elif str(USER_ID) == admin_values[0][0]:
            await query.message.answer(text=admin_text)

        elif (USER_ID != int(main_serviceman_id)) and (str(USER_ID) != admin_values[0][0]):
            for i in range(len(arendators_values)):
                print(arendators_values[i][0], type(USER_ID))
                if USER_ID == int(arendators_values[i][0]):
                    await query.message.answer(text=text,
                                               reply_markup=builder_commands_arend.as_markup())
            for i in range(len(servicemen)):
                print(servicemen[i][0], type(USER_ID))
                if USER_ID == int(servicemen[i][0]):
                    await query.message.answer(text=text,
                                               reply_markup=builder_commands_servicemen.as_markup())
        else:
            await query.message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–∏.\n"
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n"
                f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {contact[0][0]}")


@router.callback_query(CommandsCallback.filter(F.foo == "/status"))
async def callback_status(query: CallbackQuery):
    arendators_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã!A:G',
        majorDimension='ROWS'
    ).execute()['values'][2:]
    output_submit_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ó–∞—è–≤–∫–∏!A:J',
        majorDimension='ROWS'
    ).execute()['values'][2:]
    space_number, count = 0, 0

    for arendator in arendators_values:
        if int(query.from_user.id) == int(arendator[0]):
            space_number = int(arendator[-1])

    for submit in output_submit_values:
        if space_number == int(submit[1]):
            await query.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ "
                                       f"‚Ññ{submit[0]} ‚Äì {submit[5]}")
        if space_number != int(submit[1]):
            count += 1
        if count == len(output_submit_values):
            await query.message.answer(
                f"–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")


@router.callback_query(CommandsCallback.filter(F.foo == "/submit"))
async def callback_submit(query: CallbackQuery):
    text = "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /submit"
    await query.message.answer(text=text)


@router.callback_query(CommandsCallback.filter(F.foo == "/feedback"))
async def callback_submit(query: CallbackQuery):
    text = "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /feedback"
    await query.message.answer(text=text)


@router.callback_query(CommandsCallback.filter(F.foo == "/contacts"))
async def callback_submit(query: CallbackQuery):
    contact = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ö–æ–Ω—Ç–∞–∫—Ç—ã!A2:B2',
        majorDimension='ROWS'
    ).execute()['values']
    await query.message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ "
                               f"–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact[0][0]}")


@router.message(F.text == '/status')
async def cmd_status(msg: types.Message):
    arendators_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã!A:G',
        majorDimension='ROWS'
    ).execute()['values'][2:]
    output_submit_values = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ó–∞—è–≤–∫–∏!A:J',
        majorDimension='ROWS'
    ).execute()['values'][2:]
    space_number, count = 0, 0
    for arendator in arendators_values:
        if int(msg.from_user.id) == int(arendator[0]):
            space_number = int(arendator[-1])

    for submit in output_submit_values:
        if space_number == int(submit[1]):
            await msg.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ "
                             f"‚Ññ{submit[0]} ‚Äì {submit[5]}")
        if space_number != int(submit[1]):
            count += 1
        if count == len(output_submit_values):
            await msg.answer(
                f"–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")


@router.message(F.text == '/contacts')
async def cmd_contacts(msg: types.Message):
    contact = service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range='–ö–æ–Ω—Ç–∞–∫—Ç—ã!A2:B2',
        majorDimension='ROWS'
    ).execute()['values']
    await msg.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ "
                     f"–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {contact[0][0]}")
